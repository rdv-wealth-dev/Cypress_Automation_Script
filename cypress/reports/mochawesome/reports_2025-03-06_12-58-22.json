{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 12,
    "pending": 0,
    "failures": 2,
    "start": "2025-03-06T07:25:50.577Z",
    "end": "2025-03-06T07:28:22.745Z",
    "duration": 152168,
    "testsRegistered": 14,
    "passPercent": 85.71428571428571,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "991fa47d-903e-48bc-8a54-587199857f4e",
      "title": "",
      "fullFile": "cypress\\e2e\\wealth_Report\\combine_wealth.cy.js",
      "file": "cypress\\e2e\\wealth_Report\\combine_wealth.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
          "title": "Asset Report and Mutual Fund Report",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "validate the Mutual Fund Data(allMutualFundValues & PCodeValues) ",
              "fullTitle": "Asset Report and Mutual Fund Report validate the Mutual Fund Data(allMutualFundValues & PCodeValues) ",
              "timedOut": null,
              "duration": 26893,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\combine_wealth.cy.js\\\\Asset Report and Mutual Fund Report -- validate the Mutual Fund Data(allMutualFundValues & PCodeValues) (failed).png\"\n    ]\n  ]\n}",
              "code": "login();\n// For the Mutual Fund section in the report\ncy.get('#mutualSectionHead_8733 > .m-tab').click();\ncy.get('#liveportfoliocontent8733').click();\n// Extract data from the web page for mutual fund report\ncy.get('#liveportfoliocontent8733').find('table').find('tbody').children('tr').not('.sh-panel.dn') // Skip rows with class 'sh-panel dn'\n.each($row => {\n  let mutualFundRowData = {};\n  cy.wrap($row).find('td').each(($cell, cellIndex) => {\n    const cellText = $cell.text().trim();\n    switch (cellIndex) {\n      case 0:\n        // Extract SchemeName, FolioNumber, and ARNNo from the cell text\n        let schemeName = $cell.find('p.show-fund-more b').text().trim();\n        const folioNumber = $cell.find('p:contains(\"Folio\") b').text().trim();\n        const arnNo = $cell.find('p:contains(\"ARN No\") b').text().trim();\n        // Remove the text after (G) but keep (G) itself\n        schemeName = schemeName.replace(/\\(G\\)(.*)$/, '(G)');\n        mutualFundRowData.SchemeName = schemeName;\n        mutualFundRowData.FolioNumber = folioNumber;\n        mutualFundRowData.ARNNo = arnNo;\n        break;\n      case 1:\n        mutualFundRowData.InvSince = cellText;\n        break;\n      case 2:\n        mutualFundRowData.Sensex = cellText;\n        break;\n      case 3:\n        // Replace comma with blank for InvCost\n        const newInvCost = cellText.replace(/,/g, \"\");\n        mutualFundRowData.InvCost = newInvCost;\n        break;\n      case 4:\n        mutualFundRowData.DivR = cellText;\n        break;\n      case 5:\n        // Replace comma with blank for Units\n        const newUnits = cellText.replace(/,/g, \"\");\n        mutualFundRowData.Units = newUnits;\n        break;\n      case 6:\n        mutualFundRowData.PurNav = cellText;\n        break;\n      case 7:\n        mutualFundRowData.CurNav = cellText;\n        break;\n      case 8:\n        mutualFundRowData.NavDate = cellText;\n        break;\n      case 9:\n        // Replace comma with blank for CurValue (Remove commas but keep the decimal)\n        const newCurValue = cellText.replace(/,/g, \"\");\n        mutualFundRowData.CurValue = newCurValue;\n        break;\n      case 10:\n        mutualFundRowData.DivReinv = cellText;\n        break;\n      case 11:\n        mutualFundRowData.DivPaid = cellText;\n        break;\n      case 12:\n        // Replace comma with blank for Total\n        const newTotal = cellText.replace(/,/g, \"\");\n        mutualFundRowData.Total = newTotal;\n        break;\n      case 13:\n        // Replace comma with blank for GainLoss\n        const newGainLoss = cellText.replace(/,/g, \"\");\n        mutualFundRowData.GainLoss = newGainLoss;\n        break;\n      case 14:\n        mutualFundRowData.AbsRtn = cellText;\n        break;\n      case 15:\n        mutualFundRowData.XIRR = cellText;\n        break;\n    }\n  });\n  allMutualFundValues.push(mutualFundRowData);\n});\ncy.then(() => {\n  cy.log('MutualFund all Data :', allMutualFundValues);\n});\n// Extract Pcodes from the onclick attribute\ncy.get('#liveportfoliocontent8733').find('table').find('tbody').children('tr').each($row => {\n  cy.wrap($row).xpath(\"//p[contains(@class, 'show-fund-more')]\").each($p => {\n    cy.wrap($p).invoke('attr', 'onclick').then(PCode => {\n      const regex = /showTrans\\('\\d+_([A-Za-z0-9]+)_\\d{4}'\\)/;\n      const match = PCode.match(regex);\n      if (match) {\n        PCodeValues.push(match[1]);\n      }\n    });\n  });\n});\ncy.then(() => {\n  // Remove duplicate values from the array\n  const uniquePcodeValues = [...new Set(PCodeValues)];\n  cy.log('Extracted PcodeValues:', uniquePcodeValues.join(', ')); // Log all extracted values as a comma-separated list\n  cy.log('Extracted PcodeValues:', uniquePcodeValues);\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#mutualSectionHead_8733 > .m-tab`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#mutualSectionHead_8733 > .m-tab`, but never found it.\n    at Context.eval (webpack://wealthelite/./cypress/e2e/wealth_Report/combine_wealth.cy.js:29:7)",
                "diff": null
              },
              "uuid": "c58706c8-5d6e-41ac-8e31-1e9b49ee61ad",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the Connection For MongoDB & Validate the MutualFundData Against web Data ",
              "fullTitle": "Asset Report and Mutual Fund Report Validate the Connection For MongoDB & Validate the MutualFundData Against web Data ",
              "timedOut": null,
              "duration": 757,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\combine_wealth.cy.js\\\\Asset Report and Mutual Fund Report -- Validate the Connection For MongoDB & Validate the MutualFundData Against web Data (failed).png\"\n    ]\n  ]\n}",
              "code": "const {\n  collectionName1,\n  whereCondition1\n} = mongoconfig;\ncy.task('testMongoConnection', {\n  collectionName: collectionName1,\n  //\n  whereCondition: JSON.stringify(whereCondition1)\n}).then(result => {\n  cy.log('MongoDB Result:', JSON.stringify(result));\n  cy.log('MutualFund all Data :', allMutualFundValues);\n  // Perform assertions and matching logic with allMutualFundValues\n  if (result && result.success !== undefined && result.message !== undefined) {\n    expect(result.success, result.message).to.be.true;\n    if (result.success) {\n      // Continue with your assertion logic\n      let matchedRecords = [];\n      let mismatchedRecords = [];\n      allMutualFundValues.sort((a, b) => {\n        if (a.SchemeName < b.SchemeName) return -1;\n        if (a.SchemeName > b.SchemeName) return 1;\n        return a.FolioNumber < b.FolioNumber ? -1 : 1; // secondary sort on FolioNumber\n      });\n      result.data.sort((a, b) => {\n        if (a.fundDesc < b.fundDesc) return -1;\n        if (a.fundDesc > b.fundDesc) return 1;\n        return a.folio < b.folio ? -1 : 1; // secondary sort on FolioNumber\n      });\n      let isMatch;\n      let row = {};\n      let tableData = {};\n      for (let index = 0; index < result.data.length; index++) {\n        row = result.data[index];\n        tableData = allMutualFundValues[index];\n        if (tableData.SchemeName === row.fundDesc && tableData.FolioNumber === row.folio) {\n          isMatch = true;\n        } else {\n          isMatch = false;\n        }\n        if (isMatch) {\n          matchedRecords.push(row); // Store matched data\n        } else {\n          mismatchedRecords.push(row); // Store mismatched data\n        }\n      }\n      cy.log('Matched Records:', matchedRecords);\n      cy.log('Mismatched Records:', mismatchedRecords);\n    }\n  } else {\n    cy.log('Invalid result object:', JSON.stringify(result));\n    throw new Error('Invalid result object');\n  }\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'SchemeName')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'SchemeName')\n    at Context.eval (webpack://wealthelite/./cypress/e2e/wealth_Report/combine_wealth.cy.js:165:26)",
                "diff": null
              },
              "uuid": "adf7fdd5-cdfd-4349-90e4-dd5f2e732859",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate the Equity Data",
              "fullTitle": "Asset Report and Mutual Fund Report validate the Equity Data",
              "timedOut": null,
              "duration": 21450,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login();\n// For the Equity section in the report\ncy.get('#equitySectionHead_8733 > .m-tab').click();\n// Extract the data from the web page (Equity section)\ncy.get('#equitySectionData_8733 > .panel-body').find('table').find('tbody').children('tr').filter(':even').filter('[showhide=\"show\"]').each(($row, index) => {\n  let rowDataObject = {};\n  cy.wrap($row).find('td').each(($cell, cellIndex) => {\n    const cellText = $cell.text().trim();\n    switch (cellIndex) {\n      case 1:\n        rowDataObject.CompanyName = cellText;\n        break;\n      case 2:\n        rowDataObject.Exchange = cellText;\n        break;\n      case 3:\n        rowDataObject.Quantity = cellText;\n        break;\n      case 4:\n        rowDataObject.AvgRate = cellText;\n        break;\n      case 5:\n        rowDataObject.InvestedAmount = cellText;\n        break;\n      case 6:\n        rowDataObject.CurrentRate = cellText;\n        break;\n      case 7:\n        rowDataObject.Valuation = cellText;\n        break;\n      case 8:\n        rowDataObject.AbsReturn = cellText;\n        break;\n      case 9:\n        rowDataObject.XIRR = cellText;\n        break;\n    }\n  });\n  rowsData.push(rowDataObject);\n});\n// Log the rowsData for debugging\ncy.log('Rows data:', rowsData); // Log the data from the web for inspection\n//Validate the web report data\nrowsData.forEach((row, index) => {\n  cy.log(`Validating row ${index + 1}: ${JSON.stringify(row)}`);\n  // Assertions for each field in row data\n  cy.wrap(row).should('have.property', 'CompanyName').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Exchange').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Quantity').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'AvgRate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'InvestedAmount').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'CurrentRate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Valuation').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'AbsReturn').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'XIRR').and('not.be.empty');\n});",
              "err": {},
              "uuid": "d302f070-b8b7-4ec2-9da8-addb1b8a760d",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the Connection For MySQL & Validate the Equity Data Against web Data ",
              "fullTitle": "Asset Report and Mutual Fund Report Validate the Connection For MySQL & Validate the Equity Data Against web Data ",
              "timedOut": null,
              "duration": 320,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Use dynamic table\ncy.task('testMySQLConnection', {\n  tableName: dbConfig.config.tableName2,\n  whereCondition: dbConfig.config.whereCondition2\n}).then(result => {\n  expect(result.success).to.be.true;\n  cy.log(result.message);\n  if (result.data && result.data.length > 0) {\n    result.data.forEach(row => {\n      cy.log(`Row data from MySQL: ${JSON.stringify(row)}`);\n      // Validate the extracted equity data against MySQL data\n      rowsData.forEach(webRow => {\n        if (webRow.CompanyName === row.CompanyName && webRow.Quantity === row.Quantity) {\n          cy.log(`Matching row found: ${webRow.CompanyName} - ${webRow.Quantity}`);\n          // Explicitly validate each field\n          cy.wrap(webRow.CompanyName).should('equal', row.CompanyName);\n          cy.wrap(webRow.Quantity).should('equal', row.Quantity);\n          cy.wrap(webRow.AvgRate).should('equal', row.AvgRate);\n          cy.wrap(webRow.InvestedAmount).should('equal', row.InvestedAmount);\n          cy.wrap(webRow.CurrentRate).should('equal', row.CurrentRate);\n          cy.wrap(webRow.Valuation).should('equal', row.Valuation);\n          cy.wrap(webRow.AbsReturn).should('equal', row.AbsReturn);\n          cy.wrap(webRow.XIRR).should('equal', row.XIRR);\n        }\n      });\n    });\n  } else {\n    cy.log('No data found in the eq_holding table.');\n  }\n});",
              "err": {},
              "uuid": "c80b6dfe-97ce-4864-a721-a943eb7e42e5",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate the Post Office Data",
              "fullTitle": "Asset Report and Mutual Fund Report validate the Post Office Data",
              "timedOut": null,
              "duration": 19743,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login();\n// For the Postal section in the report\ncy.get('#poSectionHead_8733 > .m-tab').click();\n// Extract data from the web page\ncy.get('#poSectionData_8733 > .panel-body').find('table').find('tbody').children('tr')\n//.filter(':even')\n//.filter('[showhide=\"show\"]')\n.each(($row, index) => {\n  let schemeRowData1 = {};\n  cy.wrap($row).find('td').each(($cell, cellIndex) => {\n    const cellText = $cell.text().trim();\n    switch (cellIndex) {\n      case 0:\n        schemeRowData1.SchemeName = cellText;\n        break;\n      case 1:\n        schemeRowData1.AccountNumber = cellText;\n        break;\n      case 2:\n        schemeRowData1.SchemeType = cellText;\n        break;\n      case 3:\n        schemeRowData1.IssueDate = cellText;\n        break;\n      case 4:\n        schemeRowData1.Investment = cellText;\n        break;\n      case 5:\n        schemeRowData1.Term = cellText;\n        break;\n      case 6:\n        schemeRowData1.Interest = cellText;\n        break;\n      case 7:\n        schemeRowData1.CurrentValue = cellText;\n        break;\n      case 8:\n        schemeRowData1.MaturityDate = cellText;\n        break;\n      case 9:\n        schemeRowData1.MaturityAmount = cellText;\n        break;\n    }\n  });\n  schemeData.push(schemeRowData1);\n}).then(() => {\n  // Now, after all rows are processed, populate accData\n  accData = schemeData.map(row => row.AccountNumber);\n  accString = accData.map(item => `'${item}'`).join(', ');\n  ;\n  cy.log('Investment scheme data:', schemeData); // Log the data from the web for inspection\n  cy.log('Investment scheme AccountNumber:', accData); // Log all AccountNumbers separately\n});\n// Validate the web report data\nschemeData.forEach((row, index) => {\n  cy.log(`Validating scheme row ${index + 1}: ${JSON.stringify(row)}`);\n  // Assertions for each field in row data\n  cy.wrap(row).should('have.property', 'SchemeName').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'AccountNumber').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'SchemeType').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'IssueDate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Investment').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Term').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Interest').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'CurrentValue').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'MaturityDate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'MaturityAmount').and('not.be.empty');\n});",
              "err": {},
              "uuid": "fa7f2898-7969-4d62-9ff5-977704280eae",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the Connection For MySQL & Validate the Post Office Data Against web Data",
              "fullTitle": "Asset Report and Mutual Fund Report Validate the Connection For MySQL & Validate the Post Office Data Against web Data",
              "timedOut": null,
              "duration": 336,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(dbConfig.config.whereCondition3 + '(' + accString + ')');\n// Connect to MySQL and fetch the data\ncy.task('testMySQLConnection', {\n  tableName: dbConfig.config.tableName3,\n  whereCondition: dbConfig.config.whereCondition3 + '(' + accString + ')'\n}).then(result => {\n  cy.log(result);\n  expect(result.success).to.be.true;\n  cy.log(result.message);\n  if (result.data && result.data.length > 0) {\n    result.data.forEach(row => {\n      cy.log(`Row data from MySQL: ${JSON.stringify(row)}`);\n      // Compare each scheme from the web (scraped data) with the corresponding row from MySQL\n      schemeData.forEach(schemeRow => {\n        if (schemeRow.SchemeName === row.SchemeName) {\n          cy.log(`Matching scheme row found: ${schemeRow.SchemeName}`);\n          // Web Data vs MySQL Data\n          cy.wrap(schemeRow.SchemeName).should('equal', row.SchemeName);\n          cy.wrap(schemeRow.AccountNumber).should('equal', row.AccountNumber);\n          cy.wrap(schemeRow.SchemeType).should('equal', row.SchemeType);\n          cy.wrap(schemeRow.IssueDate).should('equal', row.IssueDate);\n          cy.wrap(schemeRow.Investment).should('equal', row.Investment);\n          cy.wrap(schemeRow.Term).should('equal', row.Term);\n          cy.wrap(schemeRow.Interest).should('equal', row.Interest);\n          cy.wrap(schemeRow.CurrentValue).should('equal', row.CurrentValue);\n          cy.wrap(schemeRow.MaturityDate).should('equal', row.MaturityDate);\n          cy.wrap(schemeRow.MaturityAmount).should('equal', row.MaturityAmount);\n        }\n      });\n    });\n  } else {\n    cy.log('No data found in the investment_schemes table.');\n  }\n});",
              "err": {},
              "uuid": "82707018-b062-408d-b5b3-6c8c4c212c31",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate the FD & Bond Data",
              "fullTitle": "Asset Report and Mutual Fund Report validate the FD & Bond Data",
              "timedOut": null,
              "duration": 19607,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login();\n// For the Postal section in the report\ncy.get('#fdSectionHead_8733 > .m-tab').click();\n// Extract data from the web page\ncy.get('#fdSectionData_8733 > .panel-body').find('table').find('tbody').children('tr')\n//.filter(':even')\n//.filter('[showhide=\"show\"]')\n.each($row => {\n  let fdBondRowData = {};\n  cy.wrap($row).find('td').each(($cell, cellIndex) => {\n    const cellText = $cell.text().trim();\n    switch (cellIndex) {\n      case 0:\n        fdBondRowData.SchemeName = cellText;\n        break;\n      case 1:\n        fdBondRowData.FolioFDNo = cellText;\n        break;\n      case 2:\n        fdBondRowData.NameOfIssuer = cellText;\n        break;\n      case 3:\n        fdBondRowData.IssueDate = cellText;\n        break;\n      case 4:\n        fdBondRowData.Investment = cellText;\n        break;\n      case 5:\n        fdBondRowData.Tenure = cellText;\n        break;\n      case 6:\n        fdBondRowData.Interest = cellText;\n        break;\n      case 7:\n        fdBondRowData.CurrentValue = cellText;\n        break;\n      case 8:\n        fdBondRowData.MaturityDate = cellText;\n        break;\n      case 9:\n        fdBondRowData.MaturityAmount = cellText;\n        break;\n    }\n  });\n  fdBondData.push(fdBondRowData);\n}).then(() => {\n  fdBondAccData = fdBondData.map(row => row.FolioFDNo);\n  fdBondAccString = fdBondAccData.map(item => `'${item}'`).join(', ');\n  cy.log('FD/Bond data:', fdBondData);\n  cy.log('FD/Bond FolioFDNo:', fdBondAccData);\n});\n// Validate the FD/Bond report data\nfdBondData.forEach((row, index) => {\n  cy.log(`Validating FD/Bond row ${index + 1}: ${JSON.stringify(row)}`);\n  // Assertions for each field in row data\n  cy.wrap(row).should('have.property', 'SchemeName').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'FolioFDNo').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'NameOfIssuer').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'IssueDate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Investment').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Tenure').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Interest').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'CurrentValue').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'MaturityDate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'MaturityAmount').and('not.be.empty');\n});",
              "err": {},
              "uuid": "74989c3f-83e8-4724-8de0-ecff6e86015c",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the Connection For MySQL & Validate the FD & Bond Data Against web Data",
              "fullTitle": "Asset Report and Mutual Fund Report Validate the Connection For MySQL & Validate the FD & Bond Data Against web Data",
              "timedOut": null,
              "duration": 311,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(dbConfig.config.whereCondition4 + '(' + fdBondAccString + ')');\n// Connect to MySQL and fetch the data\ncy.task('testMySQLConnection', {\n  tableName: dbConfig.config.tableName4,\n  whereCondition: dbConfig.config.whereCondition4 + '(' + fdBondAccString + ')'\n}).then(result => {\n  cy.log(result);\n  expect(result.success).to.be.true;\n  cy.log(result.message);\n  if (result.data && result.data.length > 0) {\n    result.data.forEach(row => {\n      cy.log(`Row data from MySQL: ${JSON.stringify(row)}`);\n      fdBondData.forEach(fdBondRow => {\n        if (fdBondRow.SchemeName === row.SchemeName && fdBondRow.FolioFDNo === row.FolioFDNo) {\n          cy.log(`Matching FD/Bond row found: ${fdBondRow.SchemeName} - ${fdBondRow.FolioFDNo}`);\n          // Web Data vs MySQL Data\n          cy.wrap(fdBondRow.SchemeName).should('equal', row.SchemeName);\n          cy.wrap(fdBondRow.FolioFDNo).should('equal', row.FolioFDNo);\n          cy.wrap(fdBondRow.NameOfIssuer).should('equal', row.NameOfIssuer);\n          cy.wrap(fdBondRow.IssueDate).should('equal', row.IssueDate);\n          cy.wrap(fdBondRow.Investment).should('equal', row.Investment);\n          cy.wrap(fdBondRow.Tenure).should('equal', row.Tenure);\n          cy.wrap(fdBondRow.Interest).should('equal', row.Interest);\n          cy.wrap(fdBondRow.CurrentValue).should('equal', row.CurrentValue);\n          cy.wrap(fdBondRow.MaturityDate).should('equal', row.MaturityDate);\n          cy.wrap(fdBondRow.MaturityAmount).should('equal', row.MaturityAmount);\n        }\n      });\n    });\n  } else {\n    cy.log('No data found in the fd_bond_report table.');\n  }\n});",
              "err": {},
              "uuid": "9d8a5647-255c-4877-bb31-ff2571512159",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate the Commodity Data",
              "fullTitle": "Asset Report and Mutual Fund Report validate the Commodity Data",
              "timedOut": null,
              "duration": 19260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login();\n// For the Commodity section in the report\ncy.get('#commSectionHead_8733 > .m-tab').click();\n// Extract data from the web page for commodity_holding\ncy.get('#commSectionData_8733 > .panel-body').find('table').find('tbody').children('tr').filter(':even').filter('[showhide=\"show\"]').each(($row, index) => {\n  let commodityRowData = {};\n  cy.wrap($row).find('td').each(($cell, cellIndex) => {\n    const cellText = $cell.text().trim();\n    switch (cellIndex) {\n      case 0:\n        commodityRowData.CompanyName = cellText;\n        break;\n      case 1:\n        commodityRowData.Quantity = cellText;\n        break;\n      case 2:\n        commodityRowData.AvgRate = cellText;\n        break;\n      case 3:\n        commodityRowData.InvestedAmount = cellText;\n        break;\n      case 4:\n        commodityRowData.CurrentRatePerGram = cellText;\n        break;\n      case 5:\n        commodityRowData.Valuation = cellText;\n        break;\n      case 6:\n        commodityRowData.AbsReturn = cellText;\n        break;\n      case 7:\n        commodityRowData.XIRR = cellText;\n        break;\n    }\n  });\n  commodityData.push(commodityRowData);\n});\n// Log the commodityData for debugging\ncy.log('Commodity data:', commodityData); // Log the data from the web for inspection\n// Validate the web report data\ncommodityData.forEach((row, index) => {\n  cy.log(`Validating commodity row ${index + 1}: ${JSON.stringify(row)}`);\n  // Assertions for each field in row data\n  cy.wrap(row).should('have.property', 'CompanyName').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Quantity').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'AvgRate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'InvestedAmount').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'CurrentRatePerGram').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Valuation').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'AbsReturn').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'XIRR').and('not.be.empty');\n});",
              "err": {},
              "uuid": "f5b26dde-f325-4aa0-aa2b-40ae24e67e97",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the Connection For MySQL & Validate the Commodity Data Against web Data",
              "fullTitle": "Asset Report and Mutual Fund Report Validate the Connection For MySQL & Validate the Commodity Data Against web Data",
              "timedOut": null,
              "duration": 306,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Use dynamic table\ncy.task('testMySQLConnection', {\n  tableName: dbConfig.config.tableName5,\n  whereCondition: dbConfig.config.whereCondition5\n}).then(result => {\n  expect(result.success).to.be.true;\n  cy.log(result.message);\n  if (result.data && result.data.length > 0) {\n    result.data.forEach(row => {\n      cy.log(`Row data from MySQL: ${JSON.stringify(row)}`);\n      // Validate the extracted commodity data against MySQL data\n      commodityData.forEach(commodityRow => {\n        if (commodityRow.CompanyName === row.CompanyName && commodityRow.Quantity === row.Quantity) {\n          cy.log(`Matching commodity row found: ${commodityRow.CompanyName} - ${commodityRow.Quantity}`);\n          // Explicitly validate each field\n          cy.wrap(commodityRow.CompanyName).should('equal', row.CompanyName);\n          cy.wrap(commodityRow.Quantity).should('equal', row.Quantity);\n          cy.wrap(commodityRow.AvgRate).should('equal', row.AvgRate);\n          cy.wrap(commodityRow.InvestedAmount).should('equal', row.InvestedAmount);\n          cy.wrap(commodityRow.CurrentRatePerGram).should('equal', row.CurrentRatePerGram);\n          cy.wrap(commodityRow.Valuation).should('equal', row.Valuation);\n          cy.wrap(commodityRow.AbsReturn).should('equal', row.AbsReturn);\n          cy.wrap(commodityRow.XIRR).should('equal', row.XIRR);\n        }\n      });\n    });\n  } else {\n    cy.log('No data found in the commodity_holding table.');\n  }\n});",
              "err": {},
              "uuid": "0c2109a0-9bdd-4e00-9939-dd00b76956fd",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate the Real Estate Data",
              "fullTitle": "Asset Report and Mutual Fund Report validate the Real Estate Data",
              "timedOut": null,
              "duration": 19427,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login();\n// For the Property section in the report\ncy.get('#realEstateSectionHead_8733 > .m-tab').click();\n// Extract data from the web page for property_holding\ncy.get('#realEstateSectionData_8733 > .panel-body').find('table').find('tbody').children('tr').filter(':even')\n// .filter('[showhide=\"show\"]')\n.each(($row, index) => {\n  let propertyRowData = {};\n  cy.wrap($row).find('td').each(($cell, cellIndex) => {\n    const cellText = $cell.text().trim();\n    switch (cellIndex) {\n      case 0:\n        propertyRowData.PropertyType = cellText;\n        break;\n      case 1:\n        propertyRowData.PropertyName = cellText;\n        break;\n      case 2:\n        propertyRowData.Area = cellText;\n        break;\n      case 3:\n        propertyRowData.AvgRate = cellText;\n        break;\n      case 4:\n        propertyRowData.InvestedAmount = cellText;\n        break;\n      case 5:\n        propertyRowData.CurrentRate = cellText;\n        break;\n      case 6:\n        propertyRowData.Valuation = cellText;\n        break;\n      case 7:\n        propertyRowData.AbsReturn = cellText;\n        break;\n      case 8:\n        propertyRowData.XIRR = cellText;\n        break;\n    }\n  });\n  propertyData.push(propertyRowData); // Push the row data into propertyData array\n});\n// Log the propertyData for debugging\ncy.log('Property data:', propertyData); // Log the data from the web for inspection\n// Validate the web report data\npropertyData.forEach((row, index) => {\n  cy.log(`Validating property row ${index + 1}: ${JSON.stringify(row)}`);\n  // Assertions for each field in row data\n  cy.wrap(row).should('have.property', 'PropertyType').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'PropertyName').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Area').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'AvgRate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'InvestedAmount').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'CurrentRate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'Valuation').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'AbsReturn').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'XIRR').and('not.be.empty');\n});",
              "err": {},
              "uuid": "d7a06040-25b0-4092-a227-e1c30c9f6aa9",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the Connection For MySQL & Validate the Real Estate Data Against web Data",
              "fullTitle": "Asset Report and Mutual Fund Report Validate the Connection For MySQL & Validate the Real Estate Data Against web Data",
              "timedOut": null,
              "duration": 308,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Use dynamic table name \ncy.task('testMySQLConnection', {\n  tableName: dbConfig.config.tableName6,\n  whereCondition: dbConfig.config.whereCondition6\n}).then(result => {\n  expect(result.success).to.be.true;\n  cy.log(result.message);\n  if (result.data && result.data.length > 0) {\n    result.data.forEach(row => {\n      cy.log(`Row data from MySQL: ${JSON.stringify(row)}`);\n      // Validate the extracted property data against MySQL data\n      propertyData.forEach(propertyRow => {\n        if (propertyRow.PropertyName === row.PropertyName) {\n          cy.log(`Matching property row found: ${propertyRow.PropertyName}`);\n          // Explicitly validate each field\n          cy.wrap(propertyRow.PropertyType).should('equal', row.PropertyType);\n          cy.wrap(propertyRow.PropertyName).should('equal', row.PropertyName);\n          cy.wrap(propertyRow.Area).should('equal', row.Area);\n          cy.wrap(propertyRow.AvgRate).should('equal', row.AvgRate);\n          cy.wrap(propertyRow.InvestedAmount).should('equal', row.InvestedAmount);\n          cy.wrap(propertyRow.CurrentRate).should('equal', row.CurrentRate);\n          cy.wrap(propertyRow.Valuation).should('equal', row.Valuation);\n          cy.wrap(propertyRow.AbsReturn).should('equal', row.AbsReturn);\n          cy.wrap(propertyRow.XIRR).should('equal', row.XIRR);\n        }\n      });\n    });\n  } else {\n    cy.log('No data found in the property_holding table.');\n  }\n});",
              "err": {},
              "uuid": "f3b614eb-32a9-4cf8-a21b-88dc99e9becf",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate the PMS Asset Data(PMSAssetData)",
              "fullTitle": "Asset Report and Mutual Fund Report validate the PMS Asset Data(PMSAssetData)",
              "timedOut": null,
              "duration": 19705,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login();\n// For the Asset section in the report\ncy.get('#PMSSectionHead_8733 > .m-tab').click();\n// Extract data from the web page for asset_report\ncy.get('#PMSSectionData_8733 > .panel-body').find('table').find('tbody').children('#parentRow_8733_1_1').each($row => {\n  let assetRowData = {};\n  cy.wrap($row).find('td').each(($cell, cellIndex) => {\n    const cellText = $cell.text().trim();\n    switch (cellIndex) {\n      case 0:\n        assetRowData.AssetType = cellText;\n        break;\n      case 1:\n        assetRowData.AssetName = cellText;\n        break;\n      case 2:\n        assetRowData.FolioNumber = cellText;\n        break;\n      case 3:\n        assetRowData.TransactionDate = cellText;\n        break;\n      case 4:\n        assetRowData.CurrentValueDate = cellText;\n        break;\n      case 5:\n        assetRowData.PurchaseAmount = cellText;\n        break;\n      case 6:\n        assetRowData.CurrentValue = cellText;\n        break;\n      case 7:\n        assetRowData.ProfitLoss = cellText;\n        break;\n      case 8:\n        assetRowData.AbsReturn = cellText;\n        break;\n      case 9:\n        assetRowData.XIRR = cellText;\n        break;\n    }\n  });\n  PMSAssetData.push(assetRowData);\n  cy.log('PMSAssetData: ', PMSAssetData);\n});\n// Validate the web report data\nPMSAssetData.forEach((row, index) => {\n  cy.log(`Validating asset row ${index + 1}: ${JSON.stringify(row)}`);\n  cy.wrap(row).should('have.property', 'AssetType').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'AssetName').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'FolioNumber').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'TransactionDate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'CurrentValueDate').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'PurchaseAmount').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'CurrentValue').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'ProfitLoss').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'AbsReturn').and('not.be.empty');\n  cy.wrap(row).should('have.property', 'XIRR').and('not.be.empty');\n});",
              "err": {},
              "uuid": "84a6d98f-2dfa-40f2-b18e-123908f242ca",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the Connection For MongoDB & Validate the PMSAsset Data Against web Data",
              "fullTitle": "Asset Report and Mutual Fund Report Validate the Connection For MongoDB & Validate the PMSAsset Data Against web Data",
              "timedOut": null,
              "duration": 306,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {\n  collectionName7,\n  whereCondition7\n} = mongoconfig;\n// Log the arguments to verify they are correct\ncy.log(`Collection: ${collectionName7}`);\ncy.log(`Query: ${JSON.stringify(whereCondition7)}`);\ncy.task('testMongoConnection', {\n  collectionName: collectionName7,\n  //successMsg: 'Successfully connected to MongoDB and fetched data from the collection!',\n  // errorMsg: 'Failed to connect to MongoDB or fetch data from the collection.',\n  whereCondition: JSON.stringify(whereCondition7)\n}).then(result => {\n  cy.log(\"result\", result);\n  cy.log('PMSAssetData: ', PMSAssetData);\n  // Add more detailed logging to understand the result\n  cy.log(`MongoDB Query Result: ${JSON.stringify(result)}`);\n  if (result) {\n    // Check if the connection was successful\n    // expect(result.success, result.message).to.be.true;\n    if (result.success) {\n      // Continue with your assertion logic\n      if (result.data && result.data.length > 0) {\n        result.data.forEach(row => {\n          cy.log(`Row data from MongoDB: ${JSON.stringify(row)}`);\n          PMSAssetData.forEach(assetRow => {\n            if (assetRow.AssetName === row.AssetName && assetRow.FolioNumber === row.FolioNumber) {\n              cy.log(`Matching asset row found: ${assetRow.AssetName} - ${assetRow.FolioNumber}`);\n              // Explicitly validate each field from the MongoDB result\n              cy.wrap(assetRow.AssetType).should('equal', row.AssetType);\n              cy.wrap(assetRow.AssetName).should('equal', row.AssetName);\n              cy.wrap(assetRow.FolioNumber).should('equal', row.FolioNumber);\n              cy.wrap(assetRow.TransactionDate).should('equal', row.TransactionDate);\n              cy.wrap(assetRow.CurrentValueDate).should('equal', row.CurrentValueDate);\n              cy.wrap(assetRow.PurchaseAmount).should('equal', row.PurchaseAmount);\n              cy.wrap(assetRow.CurrentValue).should('equal', row.CurrentValue);\n              cy.wrap(assetRow.ProfitLoss).should('equal', row.ProfitLoss);\n              cy.wrap(assetRow.AbsReturn).should('equal', row.AbsReturn);\n              cy.wrap(assetRow.XIRR).should('equal', row.XIRR);\n            }\n          });\n        });\n      } else {\n        cy.log('No data found in the asset_report collection.');\n      }\n    }\n  }\n});",
              "err": {},
              "uuid": "a849d1fd-5289-4977-a36c-97525899d00b",
              "parentUUID": "400492b6-5744-47af-ab3d-0fbfb7fb695f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d302f070-b8b7-4ec2-9da8-addb1b8a760d",
            "c80b6dfe-97ce-4864-a721-a943eb7e42e5",
            "fa7f2898-7969-4d62-9ff5-977704280eae",
            "82707018-b062-408d-b5b3-6c8c4c212c31",
            "74989c3f-83e8-4724-8de0-ecff6e86015c",
            "9d8a5647-255c-4877-bb31-ff2571512159",
            "f5b26dde-f325-4aa0-aa2b-40ae24e67e97",
            "0c2109a0-9bdd-4e00-9939-dd00b76956fd",
            "d7a06040-25b0-4092-a227-e1c30c9f6aa9",
            "f3b614eb-32a9-4cf8-a21b-88dc99e9becf",
            "84a6d98f-2dfa-40f2-b18e-123908f242ca",
            "a849d1fd-5289-4977-a36c-97525899d00b"
          ],
          "failures": [
            "c58706c8-5d6e-41ac-8e31-1e9b49ee61ad",
            "adf7fdd5-cdfd-4349-90e4-dd5f2e732859"
          ],
          "pending": [],
          "skipped": [],
          "duration": 148729,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "reports",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome/",
        "reportFilename": "reports",
        "html": true,
        "json": true,
        "overwrite": true,
        "timestamp": "yyyy-mm-dd_HH-MM-ss",
        "charts": true,
        "inline": true
      },
      "version": "6.2.0"
    }
  }
}